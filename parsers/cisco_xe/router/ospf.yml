- name: router ospf
  tags:
  - router
  - ospf
  matches:
  - name: router ospf
    template: router/ospf.j2
    lines:
    - regex: '^router ospf (\d+)$'
      examples:
      - 'router ospf 100'
      captures:
      - parent_process_id
      path:
        router:
          ospf:
            "{{ parent_process_id }}":
              process_id: "{{ parent_process_id }}"
      lines: &lines
      - regex: '^ router-id (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$'
        examples:
        - ' router-id 10.0.25.35'
        captures:
        - router_id
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                router_id: "{{ router_id }}"
      - regex: '^ log-adjacency-changes$'
        examples:
        - ' log-adjacency-changes'
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                log_adjacency_changes: True
      - regex: '^ auto-cost reference-bandwidth (\d+)$'
        examples:
        - ' auto-cost reference-bandwidth 40000'
        captures:
        - reference_bandwidth
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                auto_cost_reference_bandwidth: "{{ reference_bandwidth }}"
      - regex: '^ summary-address (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$'
        examples:
        - ' summary-address 10.0.0.0 255.0.0.0'
        captures:
        - summary_network
        - summary_netmask
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                  summary_addresses:
                  - network: "{{ summary_network }}"
                    netmask: "{{ summary_netmask }}"
      - regex: '^ redistribute static subnets$'
        examples:
        - ' redistribute static subnets'
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                redistribute:
                  static:
                    protocol: static
                    subnets: True
      - regex: '^ redistribute (\w+) (\d+) (metric-type \d) subnets route-map (\S+)$'
        examples:
        - ' redistribute ospf 100 metric-type 1 subnets route-map foo'
        captures:
        - protocol
        - redist_process_id
        - metric_types
        - route_map
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                redistribute:
                  "{{ protocol }}":
                    protocol: "{{ protocol }}"
                    process_id: "{{ redist_process_id }}"
                    metric_types: "{{ metric_types.replace(\"metric-type\", \"\").split(' ') }}"
                    subnets: True
                    route_map: "{{ route_map }}"
      - regex: '^ redistribute (\w+) metric (\d+) (metric-type \d) subnets$'
        examples:
        - ' redistribute connected metric 700 metric-type 1 subnets'
        captures:
        - protocol
        - metric
        - metric_types
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                redistribute:
                  "{{ protocol }}":
                    protocol: "{{ protocol }}"
                    metric: "{{ metric }}"
                    metric_types: "{{ metric_types.replace(\"metric-type\", \"\").split(' ') }}"
                    subnets: True
      - regex: '^ redistribute (\w+) (\d+) metric (\d+) (metric-type \d) subnets tag (\S+) route-map (\S+)$'
        examples:
        - ' redistribute bgp 65003 metric 10 metric-type 1 subnets tag 65003 route-map rt-chddc1-bgp65003-ospf100'
        captures:
        - protocol
        - redist_process_id
        - metric
        - metric_types
        - tag
        - route_map
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                redistribute:
                  "{{ protocol }}":
                    protocol: "{{ protocol }}"
                    process_id: "{{ redist_process_id }}"
                    metric: "{{ metric }}"
                    metric_types: "{{ metric_types.replace(\"metric-type\", \"\").split(' ') }}"
                    subnets: True
                    tag: "{{ tag }}"
                    route_map: "{{ route_map }}"

      - regex: '^ passive-interface default$'
        examples:
        - ' passive-interface default'
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                passive_interface_default: True
      - regex: '^ no passive-interface (\S+)$'
        examples:
        - ' no passive-interface GigabitEthernet0/0/0.10'
        captures:
        - no_passive_interface
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                passive_interfaces:
                - interface: "{{ no_passive_interface }}"
                  negate: True
      - regex: '^ network (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) area (\S+)$'
        examples:
        - ' network 10.0.5.24 0.0.0.1 area 0'
        captures:
        - network_network
        - network_netmask
        - network_area
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                  network_statements:
                  - network: "{{ network_network }}"
                    netmask: "{{ network_netmask }}"
                    area: "{{ network_area }}"
      - regex: '^ distribute-list route-map (\S+) (\w+)$'
        examples:
        - ' distribute-list route-map rt-chddc1-ospf100-bgp65003 in'
        captures:
        - distribute_list_route_map
        - direction
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                  distribute_lists:
                  - route_map: "{{ distribute_list_route_map }}"
                    direction: "{{ direction }}"
      - regex: '^ default-information originate metric (\d+) metric-type (\d)$'
        examples:
        - ' default-information originate metric 1000 metric-type 1'
        captures:
        - metric
        - metric_type
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                  default_information:
                    originate: True
                    metric: "{{ metric }}"
                    metric_type: "{{ metric_type }}"
      - regex: '^ distance (\d+)$'
        examples:
        - ' distance 15'
        captures:
        - distance
        path:
          router:
            ospf:
              "{{ parent_process_id }}":
                distance: "{{ distance }}"

# same as ^^ except vrf
    - regex: '^router ospf (\d+) vrf (\w+)$'
      examples:
      - 'router ospf 130 vrf teavana'
      captures:
      - parent_process_id
      - vrf
      path:
        router:
          ospf:
            "{{ parent_process_id }}":
              process_id: "{{ parent_process_id }}"
              vrf: "{{ vrf }}"
      lines: *lines
